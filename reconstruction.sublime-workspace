{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"cons",
				"consts"
			],
			[
				"cop",
				"copied_bin_path"
			],
			[
				"wall",
				"wall_histogram"
			],
			[
				"cloud_",
				"cloud_interior"
			],
			[
				"empty",
				"empty_like	statement"
			],
			[
				"th",
				"theta_thresh	statement"
			],
			[
				"Poin",
				"PointCloud"
			],
			[
				"V",
				"getVector3fMap"
			],
			[
				"debug_poi",
				"debug_points_merged"
			],
			[
				"debug",
				"debug_points_file"
			],
			[
				"cloud",
				"cloud_new"
			],
			[
				"cp",
				"components"
			],
			[
				"rgb",
				"rgb_merged	statement"
			],
			[
				"points",
				"points_downsampled"
			],
			[
				"exec",
				"execute_subcommand"
			],
			[
				"ones",
				"ones_like	function"
			],
			[
				"select",
				"select_variant	function"
			],
			[
				"lrf_",
				"lrf_angle_min	statement"
			],
			[
				"lrf",
				"lrf_angle_min	statement"
			],
			[
				"key",
				"keys_ordered	statement"
			],
			[
				"weight_",
				"weight_mapped	statement"
			],
			[
				"ceil",
				"ceiling_gray"
			],
			[
				"ce",
				"ceiling_gray"
			],
			[
				"null",
				"nullptr_t"
			],
			[
				"triangulate",
				"triangulatePolygon"
			],
			[
				"elev",
				"elev_override	param"
			],
			[
				"intensity",
				"intensity_raw	statement"
			],
			[
				"sca",
				"scanline	forflow"
			],
			[
				"rea",
				"read_corrupt_json	function"
			],
			[
				"dataset",
				"dataset_path	forflow"
			],
			[
				"ixs_",
				"ixs_and_self"
			],
			[
				"res",
				"resolution"
			],
			[
				"candi",
				"candidates"
			],
			[
				"interse",
				"intersectSegments"
			],
			[
				"scan",
				"scanline_range	statement"
			],
			[
				"lik",
				"zeros_like	function"
			],
			[
				"colum",
				"column_to_ix"
			],
			[
				"angle",
				"angle_column"
			],
			[
				"test_c",
				"test_concave_for_real_data"
			],
			[
				"best_",
				"best_point"
			],
			[
				"delta",
				"delta_angle"
			],
			[
				"extract",
				"extractSurface"
			],
			[
				"Rom",
				"RoomVoxelString"
			],
			[
				"pos_to",
				"pos_to_vertex"
			],
			[
				"vertex_s",
				"vertex_source"
			],
			[
				"trans",
				"transition"
			],
			[
				"exte",
				"exterior"
			],
			[
				"exterior_",
				"exterior_mesh"
			],
			[
				"exteri",
				"exterior_voxel"
			],
			[
				"Voxe",
				"VoxelState"
			],
			[
				"exter",
				"exterior_mesh"
			],
			[
				"num",
				"num_iteration"
			],
			[
				"thr",
				"throwErrorCode"
			],
			[
				"write",
				"writeWavefrontObject"
			],
			[
				"color",
				"cloud_colorless"
			],
			[
				"min",
				"min_dist"
			],
			[
				"nea",
				"nearestBarycentricApprox"
			],
			[
				"neareset",
				"nearestBarycentricApprox"
			],
			[
				"n",
				"nullptr_t"
			],
			[
				"Mes",
				"MessageType"
			],
			[
				"ix_",
				"ix_bottom"
			],
			[
				"ix_t",
				"ix_topright"
			],
			[
				"ix_top",
				"ix_topleft"
			],
			[
				"inc",
				"include"
			],
			[
				"column",
				"column_width"
			],
			[
				"colu",
				"column_height"
			],
			[
				"rec",
				"rectangles"
			],
			[
				"mesh",
				"mesh_with_uv"
			],
			[
				"rot",
				"rot_angle"
			],
			[
				"resu",
				"result_post"
			],
			[
				"light",
				"light_builder1"
			],
			[
				"LightB",
				"LightBuilderInterface"
			],
			[
				"Light",
				"LightBuilder"
			],
			[
				"simu",
				"simulation_result"
			],
			[
				"handleSi",
				"handleSimulationImage"
			],
			[
				"convert",
				"convertMeshToPy"
			],
			[
				"ali",
				"vertical-align:   (property)"
			],
			[
				"cra",
				"createPythonNDArrayFromIplImage"
			],
			[
				"sma",
				"smallest_area"
			],
			[
				"planes",
				"planes_refined"
			],
			[
				"HashCell",
				"HashCellView"
			],
			[
				"clou",
				"cloud_for_mobile"
			],
			[
				"Point",
				"PointXYZRGB"
			],
			[
				"bad",
				"badPlays"
			],
			[
				"winni",
				"winningSide"
			],
			[
				"par",
				"parseCSA"
			],
			[
				"play",
				"playerName"
			],
			[
				"pl",
				"playerName"
			],
			[
				"get",
				"getFilePaths"
			],
			[
				"board",
				"boardWithSinglePiece"
			],
			[
				"fli",
				"flipPositionY"
			],
			[
				"promo",
				"promotingPlayAt"
			],
			[
				"maybe",
				"maybePromotingPlayAt"
			],
			[
				"count",
				"count_dir"
			],
			[
				"time_",
				"time_tolerance"
			],
			[
				"the_",
				"the_depth"
			],
			[
				"scene",
				"scene_dir_abs"
			],
			[
				"all",
				"all_jobs"
			],
			[
				"scene_",
				"scene_id"
			],
			[
				"job",
				"job_pool"
			],
			[
				"valu",
				"valueOfSidedPiece"
			],
			[
				"pie",
				"pieceWeight"
			],
			[
				"promote",
				"promoteFlag"
			],
			[
				"compres",
				"compressBoard"
			],
			[
				"norm",
				"normalPieces"
			],
			[
				"eva",
				"evaluateCaptures"
			],
			[
				"pieceT",
				"pieceType"
			],
			[
				"score",
				"scoreCache"
			],
			[
				"piece",
				"pieceTypeRange"
			],
			[
				"compress",
				"compressCell"
			],
			[
				"curre",
				"currentBestPlay"
			],
			[
				"curr",
				"currentBestScore"
			],
			[
				"currentBe",
				"currentBestScore"
			],
			[
				"ev",
				"evaluatePlay"
			],
			[
				"cu",
				"currentBestScore"
			],
			[
				"cur",
				"currentBestPlay"
			],
			[
				"eval",
				"evaluateBoard"
			],
			[
				"evalua",
				"evaluatePlay"
			],
			[
				"value",
				"valueOfPiece"
			],
			[
				"evalu",
				"evaluateCapture"
			],
			[
				"P",
				"PlayerSide"
			],
			[
				"Player",
				"PlayerSide"
			],
			[
				"legalMoves",
				"legalMovesConsideringCheck"
			],
			[
				"showPie",
				"showPiecesInKanji"
			],
			[
				"Sengo",
				"SengoPair"
			],
			[
				"Seng",
				"SengoPair"
			],
			[
				"pieceTypeTo",
				"pieceTypeToBeCaptured"
			],
			[
				"Bo",
				"BoardState"
			]
		]
	},
	"buffers":
	[
	],
	"build_system": "Packages/User/scons.sublime-build",
	"command_palette":
	{
		"height": 301.0,
		"selected_items":
		[
			[
				"reinde",
				"JSON Reindent: reindent file or selection"
			],
			[
				"trailin",
				"Trailing Spaces: Delete Trailing Spaces"
			],
			[
				"rein",
				"JSON Reindent: reindent file or selection"
			],
			[
				"inde",
				"Indentation: Reindent Lines"
			],
			[
				"anaconda disa",
				"Anaconda: Disable linting on this file"
			],
			[
				"anacon",
				"Anaconda: Disable linting on this file"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"rust",
				"Set Syntax: Rust"
			],
			[
				"convert to",
				"Indentation: Convert to Spaces"
			],
			[
				"linter",
				"SublimeLinter: Show All Errors"
			],
			[
				"linter setti",
				"Preferences: SublimeLinter Settings – User"
			],
			[
				"json",
				"JSON Reindent: reindent file or selection"
			],
			[
				"c++",
				"Set Syntax: C++"
			],
			[
				"proto",
				"Set Syntax: Protocol Buffer"
			],
			[
				"trai",
				"Trailing Spaces: Delete Trailing Spaces"
			],
			[
				"update",
				"Package Control: Upgrade/Overwrite All Packages"
			],
			[
				"trail",
				"Trailing Spaces: Delete Trailing Spaces"
			],
			[
				"sort",
				"Sort Lines"
			],
			[
				"del",
				"Trailing Spaces: Delete Trailing Spaces"
			],
			[
				"dele",
				"Trailing Spaces: Delete Trailing Spaces"
			],
			[
				"C++",
				"Set Syntax: C++"
			],
			[
				"yaml",
				"Set Syntax: YAML"
			],
			[
				"inden",
				"Indentation: Reindent Lines"
			],
			[
				"thri",
				"Set Syntax: Thrift"
			],
			[
				"convert",
				"z:AAAPackageDev: Convert (YAML, JSON, PList) to…"
			],
			[
				"thrift",
				"Set Syntax: Thrift"
			],
			[
				"conve",
				"z:AAAPackageDev: Convert (YAML, JSON, PList) to…"
			],
			[
				"conv",
				"z:AAAPackageDev: Convert (YAML, JSON, PList) to…"
			],
			[
				"syntax",
				"Set Syntax: Thrift"
			],
			[
				"cpp",
				"Package Control: Upgrade Package"
			],
			[
				"xml",
				"Indent XML"
			],
			[
				"aaap",
				"z:AAAPackageDev: Convert (YAML, JSON, PList) to…"
			],
			[
				"yam",
				"Set Syntax: YAML"
			],
			[
				"thrif",
				"Set Syntax: Thrift Syntax"
			],
			[
				"set",
				"Set Syntax: Thrift"
			],
			[
				"aaaa",
				"z:AAAPackageDev: Convert (YAML, JSON, PList) to…"
			],
			[
				"aaa",
				"z:AAAPackageDev: Convert (YAML, JSON, PList) to…"
			],
			[
				"reindent",
				"JSON Reindent: reindent file or selection"
			],
			[
				"inputhe",
				"InputHelper"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"haske",
				"Set Syntax: Haskell"
			],
			[
				"fish",
				"Set Syntax: Shell Script (fish)"
			],
			[
				"shell",
				"Set Syntax: Shell Script (Bash)"
			],
			[
				"rei",
				"Indentation: Reindent Lines"
			],
			[
				"reind",
				"Indentation: Reindent Lines"
			],
			[
				"indent",
				"Indentation: Reindent Lines"
			],
			[
				"bash",
				"Set Syntax: Shell Script (Bash)"
			],
			[
				"instll",
				"Package Control: Install Package"
			],
			[
				"upgera",
				"Package Control: Upgrade Package"
			],
			[
				"beaut",
				"HTMLBeautify"
			],
			[
				"beau",
				"HTMLBeautify"
			],
			[
				"bea",
				"HTMLBeautify"
			],
			[
				"beauti",
				"HTMLBeautify"
			],
			[
				"markd",
				"Set Syntax: Markdown"
			],
			[
				"chann",
				"Package Control: Add Channel"
			],
			[
				"upgrade",
				"Package Control: Upgrade Package"
			],
			[
				"upgra",
				"Package Control: Upgrade Package"
			],
			[
				"package ",
				"Package Control: Upgrade Package"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"thr",
				"Set Syntax: Thrift Syntax"
			],
			[
				"pyt",
				"Set Syntax: Python"
			],
			[
				"pyth",
				"Set Syntax: Python"
			],
			[
				"AAA",
				"z:AAAPackageDev: New PList Syntax Definition"
			],
			[
				"saort",
				"Set Syntax: ActionScript"
			],
			[
				"syntax c",
				"Set Syntax: C"
			],
			[
				"syntax c++",
				"Set Syntax: C++"
			],
			[
				"color",
				"Color picker"
			],
			[
				"colorpi",
				"Color picker"
			],
			[
				"intall",
				"Package Control: Install Package"
			],
			[
				"remo",
				"Package Control: Remove Package"
			],
			[
				"add ",
				"Add Colorcode to current color scheme"
			],
			[
				"colorco",
				"Add Colorcode to current color scheme"
			],
			[
				"javas",
				"Set Syntax: JavaScript"
			],
			[
				"colorcod",
				"Add Colorcode to current color scheme"
			],
			[
				"codeinte",
				"SublimeCodeIntel: Reset"
			],
			[
				"lint",
				"Preferences: SublimeLinter Settings – User"
			],
			[
				"markdo",
				"Set Syntax: Markdown"
			],
			[
				"sor",
				"Sort Lines"
			],
			[
				"so",
				"Sort Lines"
			],
			[
				"py",
				"Set Syntax: Python"
			],
			[
				"instal",
				"Package Control: Install Package"
			]
		],
		"width": 532.0
	},
	"console":
	{
		"height": 139.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '7183a2d3e96f11eeadd761d777e62404e330c659d4bb41d3bdf022e94cab3cd0'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/home/xyx/devenv/reconstruction/visual/cloud_baker.cpp",
		"/home/xyx/devenv/reconstruction/visual/cloud_baker.h",
		"/home/xyx/devenv/reconstruction/visual/mapping.cpp",
		"/home/xyx/devenv/reconstruction/visual/mapping.h",
		"/home/xyx/devenv/reconstruction/visual/mapping_test.cpp",
		"/home/xyx/devenv/reconstruction/visual/shape_fitter_test.cpp",
		"/home/xyx/devenv/reconstruction/visual/mapping_test.h",
		"/home/xyx/devenv/reconstruction/scan-20140801-18:44/exterior_mesh/object.obj",
		"/home/xyx/devenv/reconstruction/visual/marching_cubes.cpp",
		"/home/xyx/devenv/reconstruction/visual/texture_conversion.h",
		"/home/xyx/devenv/cargo/tests/test_cargo.rs",
		"/home/xyx/devenv/cargo/src/bin/cargo-run.rs",
		"/home/xyx/devenv/cargo/tests/support/paths.rs",
		"/home/xyx/devenv/cargo/src/bin/cargo.rs",
		"/home/xyx/devenv/cargo/tests/support/mod.rs",
		"/home/xyx/devenv/cargo/Cargo.toml",
		"/home/xyx/devenv/reconstruction/visual/texture_conversion.cpp",
		"/home/xyx/devenv/reconstruction/visual/textured_mesh.h",
		"/home/xyx/devenv/reconstruction/visual/textured_mesh.cpp",
		"/home/xyx/devenv/reconstruction/visual/scene_recognizer.cpp",
		"/home/xyx/devenv/reconstruction/visual/scene_recognizer.h",
		"/home/xyx/devenv/cargo/src/bin/cargo-build.rs",
		"/home/xyx/devenv/reconstruction/scan-20140801-18:44/interior_0/object.obj",
		"/home/xyx/devenv/cargo/Makefile",
		"/home/xyx/devenv/cargo/tests/check-style.sh",
		"/home/xyx/devenv/cargo/tests/test_cargo_compile_git_deps.rs",
		"/home/xyx/devenv/cargo/src/cargo/util/process_builder.rs",
		"/home/xyx/devenv/cargo/src/cargo/util/errors.rs",
		"/home/xyx/devenv/cargo/tests/test_cargo_test.rs",
		"/home/xyx/devenv/cargo/tests/test_cargo_doc.rs",
		"/home/xyx/devenv/cargo/src/bin/cargo-verify-project.rs",
		"/home/xyx/devenv/cargo/src/bin/cargo-new.rs",
		"/home/xyx/devenv/cargo/tests/test_cargo_compile.rs",
		"/home/xyx/devenv/cargo/tests/test_cargo_new.rs",
		"/home/xyx/devenv/cargo/src/bin/cargo-test.rs",
		"/home/xyx/devenv/cargo/src/bin/cargo-clean.rs",
		"/home/xyx/devenv/reconstruction/main.cpp",
		"/home/xyx/devenv/reconstruction/visual/shape_fitter.h",
		"/home/xyx/devenv/reconstruction/visual/shape_fitter.cpp",
		"/home/xyx/devenv/reconstruction/wall_histogram.csv",
		"/home/xyx/devenv/reconstruction/csv.h",
		"/home/xyx/devenv/reconstruction/logging.h",
		"/home/xyx/devenv/reconstruction/logging.cpp",
		"/home/xyx/devenv/reconstruction/third/ICP.h",
		"/home/xyx/devenv/reconstruction/test_recognize_3rooms.sh",
		"/home/xyx/devenv/reconstruction/pre_rotation.json",
		"/home/xyx/devenv/capturer/assemble_capture.py",
		"/home/xyx/devenv/reconstruction/correlate_horizontal.py",
		"/home/xyx/devenv/reconstruction/prototype-archive/sa_test.py",
		"/home/xyx/devenv/cargo/tests/tests.rs",
		"/home/xyx/devenv/cargo/tests/test_cargo_version.rs",
		"/home/xyx/devenv/cargo/tests/test_cargo_clean.rs",
		"/home/xyx/devenv/cargo/tests/test_shell.rs",
		"/home/xyx/devenv/capturer/calibration-real.json",
		"/home/xyx/devenv/capturer/calibration-home.json",
		"/home/xyx/devenv/reconstruction/third/nanoflann.hpp",
		"/home/xyx/devenv/reconstruction/visual/triangle_mesh.cpp",
		"/home/xyx/devenv/reconstruction/visual/triangle_mesh.h",
		"/home/xyx/devenv/reconstruction/visual/cloud_conversion.cpp",
		"/home/xyx/devenv/reconstruction/visual/cloud_conversion.h",
		"/data/research/2014/reconstruction/reconstruction-generated-c082e271/test-20140801-1524-gakusei-table/small_data.json",
		"/data/research/2014/reconstruction/reconstruction-generated-c082e271/test-20140801-15:24-gakusei-table/small_data.json",
		"/data/research/2014/reconstruction/reconstruction-generated-c082e271/scan-20140801-1847/small_data.json",
		"/home/xyx/devenv/capturer/scan-20140801-18:41-gakusei-large/points.json",
		"/home/xyx/devenv/capturer/scan-20140801-18:57-gakusei-small-2/points.json",
		"/home/xyx/devenv/cargo/tests/test_cargo_cross_compile.rs",
		"/home/xyx/devenv/cargo/src/cargo/core/resolver.rs",
		"/home/xyx/devenv/bonsai/genesis/src/main.rs",
		"/home/xyx/devenv/cargo/src/cargo/lib.rs",
		"/home/xyx/devenv/cargo/configure",
		"/home/xyx/devenv/cargo/src/cargo/core/shell.rs",
		"/home/xyx/devenv/reconstruction/raw_cloud.ply",
		"/home/xyx/devenv/capturer/scan-20140801-18:47/points.ply",
		"/home/xyx/devenv/reconstruction/SConstruct",
		"/home/xyx/devenv/cargo/src/cargo/core/package_id.rs",
		"/home/xyx/devenv/cargo/README.md",
		"/home/xyx/devenv/capturer/scan-20140801-18:41-gakusei-large/points.ply",
		"/home/xyx/devenv/capturer/scan-20140801-19:00-gakusei-small-3/points.ply",
		"/home/xyx/devenv/reconstruction/room_bundle/small_data.json",
		"/home/xyx/devenv/reconstruction/visual/marching_cubes.h",
		"/home/xyx/devenv/capturer/assembled_cloud.json",
		"/home/xyx/devenv/capturer/tools/calibrate.py",
		"/home/xyx/devenv/capturer/test_cloud-test-20140711-16:00-gakusei1.ply",
		"/home/xyx/devenv/reconstruction/visual/voxel_conversion.h",
		"/home/xyx/devenv/reconstruction/visual/voxel_conversion.cpp",
		"/home/xyx/devenv/reconstruction/debug_voxel_delta.ply",
		"/home/xyx/devenv/reconstruction/visual/scene_converter.h",
		"/home/xyx/devenv/reconstruction/visual/scene_recognizer_test.cpp",
		"/home/xyx/devenv/reconstruction/analyzer/manhattan_belief_test.cpp",
		"/home/xyx/devenv/reconstruction/extract_lights.py",
		"/home/xyx/devenv/reconstruction/prototype-archive/README.md",
		"/home/xyx/devenv/reconstruction/sa_test.py",
		"/home/xyx/research/ar-led/scanner_rt/PCLccl/driver/LRF_driver.cpp",
		"/home/xyx/research/ar-led/scanner_rt/PCLccl/driver/LRF/LRFConverter.cpp",
		"/home/xyx/research/ar-led/scanner_rt/PCLccl/driver/LRF/LRFWorld.cpp",
		"/home/xyx/devenv/reconstruction/asset.pb.h",
		"/home/xyx/devenv/reconstruction/asset.pb.cc",
		"/home/xyx/devenv/reconstruction/visual/scene_converter.cpp",
		"/home/xyx/devenv/reconstruction/log",
		"/home/xyx/devenv/capturer/firmware/capturer_server.cpp",
		"/home/xyx/devenv/capturer/firmware/driver/LRF_driver.cpp",
		"/home/xyx/devenv/capturer/firmware/camera_parameters.cpp",
		"/home/xyx/devenv/reconstruction/room_box/object.obj",
		"/home/xyx/devenv/reconstruction/sa_wrap.png",
		"/home/xyx/devenv/rust-test/hello.rs",
		"/home/xyx/devenv/capturer/test_cloud.ply",
		"/home/xyx/devenv/capturer/calibration.json",
		"/home/xyx/.config/sublime-text-3/Packages/User/Preferences.sublime-settings",
		"/home/xyx/.config/sublime-text-3/Packages/User/Anaconda.sublime-settings",
		"/home/xyx/.config/sublime-text-3/Packages/User/Sublime Settings.sublime-settings",
		"/home/xyx/.config/sublime-text-3/Packages/User/SublimeLinter.sublime-settings",
		"/home/xyx/devenv/capturer/data-clean.json",
		"/home/xyx/devenv/capturer/data.json",
		"/data-new/research/2014/capturer/201407-raw-data-from-scanner/test-20140711-16:00-gakusei1/data.json",
		"/home/xyx/devenv/reconstruction/assemble_capture.py",
		"/home/xyx/devenv/reconstruction/visual/dense_voxel.h",
		"/home/xyx/devenv-archive/ComputerVision-AlgApp/complete/list",
		"/home/xyx/devenv/reconstruction/launch.py",
		"/home/xyx/devenv/reconstruction/visual/dense_voxel.cpp",
		"/home/xyx/devenv/reconstruction/analyzer/manhattan_belief.cpp",
		"/home/xyx/devenv/capturer/firmware/driver/LRF_driver.h",
		"/home/xyx/devenv/capturer/firmware/driver/file_driver.h",
		"/home/xyx/devenv/capturer/firmware/driver/file_driver.cpp",
		"/home/xyx/devenv/capturer/firmware/capturer_server.h",
		"/home/xyx/devenv/capturer/firmware/driver/driver.cpp",
		"/home/xyx/devenv/capturer/firmware/driver/driver.h",
		"/home/xyx/devenv/capturer/firmware/json_util_test.cpp",
		"/home/xyx/devenv/capturer/firmware/driver/dynamixel/servo.h"
	],
	"find":
	{
		"height": 34.0
	},
	"find_in_files":
	{
		"height": 94.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"windows",
			"-run=cook",
			"mkdir_recursive",
			"Builder",
			"Install",
			"with_output",
			"home(",
			"Could not execute process",
			"with_err_msg",
			"output",
			".assert",
			"try!",
			"mkdir_recursive",
			"ProcessError",
			"for ProcessEr",
			"impl",
			"as",
			"Result",
			"mkdir_recursive",
			"process",
			"root()",
			"cargo_dir()",
			"root()",
			"cargo_",
			"FileBuilder",
			"execs",
			"project",
			"append",
			"Parameters",
			"point_to_point",
			"SICP",
			"robustMinMax",
			"extractH",
			"ear",
			"robustMinMax",
			"extractPolygon2D",
			"calculateConcaveHull",
			"exists",
			"calculateConcaveHull",
			"help",
			"version",
			"git",
			"cloud",
			"240",
			"480",
			"640",
			"fillHoles",
			"Voxelizer",
			"showVec3",
			"estimateU",
			"createBox",
			"extractSurf",
			"extractSurface",
			"shape_fitter::",
			"CalcAngleOfLightWithProbabilisticHough",
			"OBBFitter",
			"1233",
			"downsample_grid",
			"complex",
			"ColorCloud",
			"5",
			"index",
			".0,2552.0,2538.0,2575.0,2564.0",
			"std::tuple<int, int, int>",
			"ReadBlockData",
			"BlockData",
			"TIMEOUT",
			"settime",
			"GetQueryPerformanceCounter",
			"RxPacket",
			"Ping",
			"ERR_DX_INST",
			"GetQueryPerformanceCounter",
			"timeouts",
			"RxPacket (",
			"RxPacket",
			"DX_ReadBlockData",
			"TErrorCode",
			"fstream",
			"cout",
			"ios",
			"BAUD",
			"TDeviceID",
			"(void)",
			"CDmxl",
			"this.scene_desc",
			"SceneDesc",
			"update_dir",
			"/lights",
			"write",
			"usleep",
			"Sleep",
			"replaceL",
			"ArledServer",
			"std::tuple<int, int>",
			"range3",
			"Ob",
			"start",
			"fstream",
			"e+",
			"e-",
			"ostream",
			"1",
			"e+",
			"LightSpot",
			"importDistribution",
			"\"long\"",
			"handleLightsSummary",
			"\"",
			".id",
			"handleSimulation",
			"setSupp",
			"world.reset",
			"replaceLight",
			"serialize",
			"handleSimulationStart",
			"re",
			"light_id_replace",
			"World",
			"null",
			"ScanLights",
			".\n",
			".",
			"Compile",
			"Compiler",
			"ic",
			", -1}",
			"-1, "
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"",
			"Tuple3i",
			"()",
			"Servo",
			"CapturerServer",
			"Eigen::Vector2i",
			"range2",
			"",
			"e-",
			"handleLightsFilters",
			"SceneConverter",
			"}",
			"",
			"PlaneGeometry",
			"this.$el",
			"patternToString",
			"patternFromString",
			"pcl::PointIndices",
			"std::shared_ptr",
			"Int",
			"SceneBelief",
			"Float",
			"Int",
			"FastBoard",
			",",
			"showPiecesInKanji",
			"[ \\\\t]",
			"[ \\t]",
			"",
			"ESC_CH_SPACE_OR_TAB",
			"[ \\t]",
			"[ \\\\t]",
			"[ \\t]",
			"",
			"CH_SPACE_OR_TAB",
			"",
			"MotionViewer",
			"VoxelIndex",
			"manhattan.voxel_size",
			"belief",
			"SceneBelief& belief",
			"SceneBelief",
			"SceneBelief::",
			"pi",
			"Eigen::Vector3d",
			"=",
			"value=",
			"std::shared_ptr",
			"Eigen::Vector3f",
			"tracking_ok",
			"",
			"FutureViewer",
			"lrfCameraParams",
			"cameraIntrinsicParams.getHeight()",
			"cameraIntrinsicParams.getWidth()",
			"getMatrix()",
			"cameraIntrinsicParams.getHeight()",
			"cameraIntrinsicParams.getWidth()",
			"std::vector",
			"std::string",
			") \\{",
			"{\\n\\t",
			"(",
			"",
			"scene->",
			"importDistribution",
			"Core",
			"ObjectId",
			"Geometry",
			"warp_shader->",
			"standard_shader->"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
			]
		}
	],
	"incremental_find":
	{
		"height": 25.0
	},
	"input":
	{
		"height": 34.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 159.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.package_dev":
	{
		"height": 110.0
	},
	"project": "reconstruction.sublime-project",
	"replace":
	{
		"height": 64.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
			[
				"bak",
				"cloud_baker.h"
			],
			[
				"main",
				"main.cpp"
			],
			[
				"tex",
				"texture_conversion.h"
			],
			[
				"camera",
				"ar-led/scanner_rt/PCLccl/camera_parameters.h"
			],
			[
				"camera_p",
				"ar-led/scanner_rt/PCLccl/camera_parameters.cpp"
			],
			[
				"lrfsca",
				"ar-led/scanner_rt/PCLccl/driver/LRF/LRFScanner.h"
			],
			[
				"ui",
				"construct/ui.cpp"
			],
			[
				"ui.",
				"construct/ui.h"
			],
			[
				"core.cpp",
				"construct/core.cpp"
			],
			[
				"light",
				"construct/light.cpp"
			],
			[
				"lig",
				"construct/light.cpp"
			],
			[
				"core.cp",
				"construct/core.cpp"
			],
			[
				"core.h",
				"construct/core.h"
			],
			[
				"ligh",
				"construct/light.h"
			],
			[
				"ui.c",
				"construct/ui.cpp"
			],
			[
				"scene",
				"construct/scene.cpp"
			],
			[
				"sce",
				"construct/scene.cpp"
			],
			[
				"sk",
				"construct/sky.cpp"
			],
			[
				"light.",
				"construct/light.cpp"
			],
			[
				"core",
				"construct/core.cpp"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"selected_items":
		[
			[
				"",
				"~/devenv/partial-cfg/partial-cfg.sublime-workspace"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 244.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
